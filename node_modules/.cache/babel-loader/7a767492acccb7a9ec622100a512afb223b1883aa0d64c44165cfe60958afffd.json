{"ast":null,"code":"import { apiConfig } from './props';\nclass Api {\n  constructor(_ref) {\n    let {\n      url,\n      headers\n    } = _ref;\n    this._url = url;\n    this._headers = headers;\n  }\n  _setRequest(url, config) {\n    return fetch(url, config);\n  }\n  _returnRes(res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Ошибка: ${res.status}`);\n  }\n\n  // handle user info\n\n  getUserInfo() {\n    return this._setRequest(`${this._url}/users/me`, {\n      headers: this._headers\n    }).then(res => this._returnRes(res));\n  }\n  patchUserAvatar(_ref2) {\n    let {\n      userAvatar\n    } = _ref2;\n    return this._setRequest(`${this._url}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        'avatar': userAvatar\n      })\n    }).then(res => this._returnRes(res));\n  }\n  patchUserInfo(_ref3) {\n    let {\n      name,\n      about\n    } = _ref3;\n    console.log(name, about);\n    return this._setRequest(`${this._url}/users/me`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        'name': name,\n        'about': about\n      })\n    }).then(res => this._returnRes(res));\n  }\n\n  // handle cards\n\n  getInitialCards() {\n    return this._setRequest(`${this._url}/cards`, {\n      headers: this._headers\n    }).then(res => this._returnRes(res));\n  }\n  postCard(_ref4) {\n    let {\n      placeName,\n      placeLink\n    } = _ref4;\n    return this._setRequest(`${this._url}/cards`, {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify({\n        'name': placeName,\n        'link': placeLink\n      })\n    }).then(res => this._returnRes(res));\n  }\n  deleteCard(cardID) {\n    return this._setRequest(`${this._url}/cards/${cardID}`, {\n      method: 'DELETE',\n      headers: this._headers\n    }).then(res => this._returnRes(res));\n  }\n\n  // handle likes\n\n  changeLikeCardStatus(cardID, isLiked) {\n    if (!isLiked) {\n      return this._setRequest(`${this._url}/cards/${cardID}/likes`, {\n        method: 'PUT',\n        headers: this._headers\n      }).then(res => this._returnRes(res));\n    } else {\n      return this._setRequest(`${this._url}/cards/${cardID}/likes`, {\n        method: 'DELETE',\n        headers: this._headers\n      }).then(res => this._returnRes(res));\n    }\n  }\n}\nconst api = new Api(apiConfig);\nexport default api;","map":{"version":3,"names":["apiConfig","Api","constructor","_ref","url","headers","_url","_headers","_setRequest","config","fetch","_returnRes","res","ok","json","Promise","reject","status","getUserInfo","then","patchUserAvatar","_ref2","userAvatar","method","body","JSON","stringify","patchUserInfo","_ref3","name","about","console","log","getInitialCards","postCard","_ref4","placeName","placeLink","deleteCard","cardID","changeLikeCardStatus","isLiked","api"],"sources":["/Users/dmitriklimkin/dev/mesto-react/src/utils/Api.js"],"sourcesContent":["import {apiConfig} from './props';\n\n\nclass Api {\n  constructor({url, headers}) {\n    this._url = url;\n    this._headers = headers;\n  }\n  \n  _setRequest(url, config) {\n    return fetch(url, config);\n  }\n  \n  _returnRes(res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Ошибка: ${res.status}`);\n  }\n  \n  \n  // handle user info\n  \n  getUserInfo() {\n    return this._setRequest(`${this._url}/users/me`, {\n      headers: this._headers\n    }).then(res => this._returnRes(res));\n  }\n  \n  patchUserAvatar({userAvatar}) {\n    return this._setRequest(`${this._url}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        'avatar': userAvatar\n      })\n    }).then(res => this._returnRes(res));\n  }\n  \n  patchUserInfo({name, about}) {\n    console.log(name, about);\n    return this._setRequest(`${this._url}/users/me`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        'name': name,\n        'about': about\n      })\n    }).then(res => this._returnRes(res));\n  }\n  \n  \n  // handle cards\n  \n  getInitialCards() {\n    return this._setRequest(`${this._url}/cards`, {\n      headers: this._headers\n    }).then(res => this._returnRes(res));\n  }\n  \n  postCard({placeName, placeLink}) {\n    return this._setRequest(`${this._url}/cards`, {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify({\n        'name': placeName,\n        'link': placeLink\n      })\n    }).then(res => this._returnRes(res));\n  }\n  \n  deleteCard(cardID) {\n    return this._setRequest(`${this._url}/cards/${cardID}`, {\n      method: 'DELETE',\n      headers: this._headers\n    }).then(res => this._returnRes(res));\n  }\n  \n  \n  // handle likes\n  \n  changeLikeCardStatus(cardID, isLiked) {\n    if (!isLiked) {\n      return this._setRequest(`${this._url}/cards/${cardID}/likes`, {\n        method: 'PUT',\n        headers: this._headers\n      }).then(res => this._returnRes(res));\n    } else {\n      return this._setRequest(`${this._url}/cards/${cardID}/likes`, {\n        method: 'DELETE',\n        headers: this._headers\n      }).then(res => this._returnRes(res));\n    }\n  }\n}\n\nconst api = new Api(apiConfig);\n\nexport default api;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}